# Solved
# Highly Divisible Triangular Number

# Problem 12
# The sequence of triangle numbers is generated by adding the natural numbers.
# So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
# The first ten terms would be:

# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55,...
# Let us list the factors of the first seven triangle numbers:

# 1: 1
# 3: 1, 3
# 6: 1, 2, 3, 6
# 10: 1, 2, 5, 10
# 15: 1, 3, 5, 15
# 21: 1, 3, 7, 21
# 28: 1, 2, 4, 7, 14,28

# We can see that 28 is the first triangle number to have over five divisor
# What is the value of the first triangle number to have over five hundred divisors?
# Answer: 76576500

# Solution:

import math

count = 1
triangularNumber = 0
found = False

# Count the divisor of a given number
def target_number_divisor(number):
    count_divisible = 0
    divisible = int(math.sqrt(number))

    while divisible > 0:
        if number % divisible == 0:
            if divisible != number // divisible:
                count_divisible += 2
            else: count_divisible += 1
        divisible -= 1
    return count_divisible


# Iterate to count triangular number
while not found:
    triangularNumber += count
    if target_number_divisor(triangularNumber) > 500:
        found = True
        print(triangularNumber)
    count += 1